#!/usr/bin/env python3

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import getpass
import logging
import argparse

import pymysql

from firma.storage.mysql import \
    get_conf, \
    mysql_test, \
    mysql_create, \
    mysql_source, \
    mysql_empty, \
    mysql_drop_triggers, \
    mysql_drop, \
    mysql_generate_conf


LOG = logging.getLogger('mysql')



def main_functions(
        conf_path,
        key=None, purge=False, empty=False, drop_triggers=False,
        account=None, generate=False, generate_dump=False, test=False,
        source=None):
    # pylint: disable=too-many-return-statements

    options = get_conf(conf_path)

    if key:
        print((getattr(options, key)))
        return None

    if generate or generate_dump:
        return mysql_generate_conf(
            options, account=account, dump=generate_dump)

    if test:
        if mysql_test(options):
            pass
        else:
            LOG.error("Database and users not correctly set up.")
            sys.exit(1)


    db_options = {
        "host": "localhost",
        # "unix_socket": "/var/run/mysqld/mysqld.sock",
    }

    if source or empty or drop_triggers:
        db_options.update({
            "user": options.admin_username,
            "passwd": options.admin_password,
        })
    elif purge:
        db_options.update({
            "user": "root",
            "passwd": getpass.getpass("MySQL root password: "),
        })
    else:
        return mysql_create(options)

    try:
        connection = pymysql.connect(**db_options)
    except pymysql.err.OperationalError as e:
        if str(e).startswith("(1045,"):
            # Access denied
            if "using password: NO" in str(e):
                LOG.error("Could not access database. No password was supplied.")
                sys.exit(1)
            elif "using password: YES" in str(e):
                LOG.error("Could not access database.")
                LOG.error("-   Supplied password may be incorrect.")
                LOG.error("-   User password may not have been initialized.")
                LOG.error("-   MySql Root account may be disabled for non-root OS users.")
                sys.exit(1)
        if str(e).startswith("(2003,"):
            # Cannot connect
            LOG.error("Could not connect to MySQL server at localhost.")
            LOG.error("-   Check the server is running. `ps -ef | grep mysql`.")
            LOG.error("-   If `/var/run/mysqld/mysqld.sock` exists, the server is.")
            LOG.error("    running, but not accepting connections to localhost.")
            sys.exit(1)
        raise e

    cursor = connection.cursor()

    try:
        cursor.execute("use %s" % options.database)
    except pymysql.err.InternalError as e:
        if str(e).startswith("(1049,"):
            # Database does not exist
            if purge:
                LOG.warning(
                    "Database '%s' does not exist. Nothing to do.",
                    options.database)
                return
            LOG.error(
                "Database '%s' does not exist.",
                options.database)
            sys.exit(1)
        raise e


    if source:
        return mysql_source(cursor, source)

    if empty:
        return mysql_empty(cursor)

    if drop_triggers:
        return mysql_drop_triggers(cursor, options)

    # Purge
    return mysql_drop(cursor, options)



def main():
    LOG.addHandler(logging.StreamHandler())

    parser = argparse.ArgumentParser(
        description="Create MySQL database and users.")
    parser.add_argument(
        "--verbose", "-v",
        action="count", default=0,
        help="Print verbose information for debugging.")
    parser.add_argument(
        "--quiet", "-q",
        action="count", default=0,
        help="Suppress warnings.")

    parser.add_argument(
        "--key", "-k",
        action="store",
        help="Print a configuration key")
    parser.add_argument(
        "--test", "-t",
        action="store_true", default=False,
        help="Check the database and users are correctly setup.")
    parser.add_argument(
        "--purge", "-p",
        action="store_true", default=False,
        help="Delete database and users.")
    parser.add_argument(
        "--empty", "-e",
        action="store_true", default=False,
        help="Empty the database.")
    parser.add_argument(
        "--drop-triggers", "-r",
        action="store_true", default=False,
        help="Drop all triggers.")
    parser.add_argument(
        "--account", "-a",
        action="store",
        help="Specify account for conf files..")
    parser.add_argument(
        "--generate", "-g",
        action="store_true", default=False,
        help="Generate MySQL conf to stdout.")
    parser.add_argument(
        "--generate-dump", "-G",
        action="store_true", default=False,
        help="Generate MySQL dump conf to stdout.")
    parser.add_argument(
        "--source", "-s",
        action="store", dest="source",
        help="Source SQL.")

    parser.add_argument(
        "conf_path", metavar="CONF",
        help="Path to configuration file.")

    args = parser.parse_args()

    level = (logging.ERROR, logging.WARNING, logging.INFO, logging.DEBUG)[
        max(0, min(3, 1 + args.verbose - args.quiet))]
    LOG.setLevel(level)

    main_functions(
        args.conf_path,
        key=args.key,
        purge=args.purge,
        empty=args.empty,
        drop_triggers=args.drop_triggers,
        account=args.account,
        generate=args.generate,
        generate_dump=args.generate_dump,
        test=args.test,
        source=args.source
    )


if __name__ == "__main__":
    main()
