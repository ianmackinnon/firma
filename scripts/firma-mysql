#!/usr/bin/env python3

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import logging
import argparse

from pathlib import Path

import pymysql

from firma.util import (
    init_logs,
)
from firma.storage.mysql import (
    MYSQL_ERROR,
    env_accounts,
    load_env,
    mysql_test,
    mysql_create,
    mysql_source,
    mysql_empty,
    mysql_drop_triggers,
    mysql_drop_users,
    mysql_drop_database,
    mysql_create_users,
    mysql_generate_conf,
    get_root_cursor,
    get_account_cursor,
    verify_mysql_name,
    verify_mysql_user,
)



LOG = logging.getLogger('mysql')



def main_functions(
        env_path: Path,
        purge=False, empty=False, drop_triggers=False,
        account=None, generate=False, generate_dump=False, update_users=False,
        test=False, source=None):
    # pylint: disable=too-many-return-statements

    env = load_env(env_path)

    accounts = env_accounts(env)

    verify_mysql_name(env, "DB_NAME")
    for v in accounts:
        verify_mysql_user(env, v)

    if generate or generate_dump:
        return mysql_generate_conf(env, account=account, dump=generate_dump)

    if test:
        if mysql_test(env, accounts):
            pass
        else:
            LOG.error("Database and users not correctly set up.")
            sys.exit(1)

    if source or empty or drop_triggers:
        cursor = get_account_cursor(env, account)
    elif (purge or update_users):
        cursor = get_root_cursor()
    else:
        # Use the MySQL root account
        return mysql_create(env, accounts)

    if purge:
        # Further purge commands later in this function
        mysql_drop_users(cursor, env, accounts)

    # Connect to DB
    try:
        cursor.execute(f"use {env['DB_NAME']}")
    except pymysql.err.OperationalError as e:
        if e.args[0] == MYSQL_ERROR["DB_NO_EXIST"]:
            if purge:
                LOG.warning(
                    "Database '%s' does not exist. Nothing to do.",
                    env['DB_NAME'])
                return
            LOG.error("Database '%s' does not exist.", env['DB_NAME'])
            sys.exit(1)
        else:
            raise e


    if source:
        return mysql_source(cursor, source)

    if empty:
        return mysql_empty(cursor, env)

    if drop_triggers:
        return mysql_drop_triggers(cursor, env)

    if purge:
        mysql_drop_database(cursor, env["DB_NAME"])
        return

    if update_users:
        return mysql_create_users(cursor, env, accounts)

    raise Exception("No action specified")



def main():
    parser = argparse.ArgumentParser(
        description="Manage MySQL database and users.")

    parser.add_argument(
        "--verbose", "-v",
        action="count", default=0,
        help="Print verbose information for debugging.")
    parser.add_argument(
        "--quiet", "-q",
        action="count", default=0,
        help="Suppress warnings.")

    parser.add_argument(
        "--test", "-t",
        action="store_true", default=False,
        help="Check the database and users are correctly setup.")
    parser.add_argument(
        "--purge", "-p",
        action="store_true", default=False,
        help="Delete database and users.")
    parser.add_argument(
        "--empty", "-e",
        action="store_true", default=False,
        help="Empty the database.")
    parser.add_argument(
        "--drop-triggers", "-r",
        action="store_true", default=False,
        help="Drop all triggers.")
    parser.add_argument(
        "--account", "-a",
        action="store",
        help="Specify account for conf files..")
    parser.add_argument(
        "--generate", "-g",
        action="store_true", default=False,
        help="Generate MySQL conf to stdout.")
    parser.add_argument(
        "--generate-dump", "-G",
        action="store_true", default=False,
        help="Generate MySQL dump conf to stdout.")
    parser.add_argument(
        "--update-users", "-u",
        action="store_true",
        help="Update Users and Priviledges.")
    parser.add_argument(
        "--source", "-s",
        action="store", dest="source",
        help="Source SQL.")

    parser.add_argument(
        "--env", "-E",
        action="store", dest="env_path",
        type=Path,
        help="Path to directory of .env files.")

    args = parser.parse_args()
    init_logs(LOG, args=args)


    if args.account:
        args.account = args.account.upper()


    main_functions(
        args.env_path,
        purge=args.purge,
        empty=args.empty,
        drop_triggers=args.drop_triggers,
        account=args.account,
        generate=args.generate,
        generate_dump=args.generate_dump,
        update_users=args.update_users,
        test=args.test,
        source=args.source
    )


if __name__ == "__main__":
    main()
